[net]
# Testing
#batch=1
#subdivisions=1
# Training
batch=128
subdivisions=64

width=608
height=608
channels=3

momentum=0.9
decay=0.0005
angle=0
saturation = 1.5
exposure = 1.5
hue=.1

learning_rate=0.0005
burn_in=1000
max_batches = 30000
policy=steps
steps=    10000,  20000,  25000,  90000, 110000, 200000, 250000
scales=      .1,     .1,     .1,     .1,     .1,     .1,     .1

## Layer 0
[convolutional]
batch_normalize=1
filters=32
size=3
stride=1
pad=1
activation=leaky

# Downsample
## Layer 1
[convolutional]
batch_normalize=1
filters=64
size=3
stride=2
pad=1
activation=leaky

## Layer 2
[convolutional]
batch_normalize=1
filters=32
size=1
stride=1
pad=1
activation=leaky

## Layer 3
[convolutional]
batch_normalize=1
filters=64
size=3
stride=1
pad=1
activation=leaky

## Layer 4
[shortcut]
from=-3
activation=linear

# Downsample
## Layer 5
[convolutional]
batch_normalize=1
filters=128
size=3
stride=2
pad=1
activation=leaky

## Layer 6
[convolutional]
batch_normalize=1
filters=64
size=1
stride=1
pad=1
activation=leaky

## Layer 7
[convolutional]
batch_normalize=1
filters=128
size=3
stride=1
pad=1
activation=leaky

## Layer 8
[shortcut]
from=-3
activation=linear

## Layer 9
[convolutional]
batch_normalize=1
filters=64
size=1
stride=1
pad=1
activation=leaky

## Layer 10
[convolutional]
batch_normalize=1
filters=128
size=3
stride=1
pad=1
activation=leaky

## Layer 11
[shortcut]
from=-3
activation=linear

# Downsample
## Layer 12
[convolutional]
batch_normalize=1
filters=256
size=3
stride=2
pad=1
activation=leaky

## Layer 13
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 14
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 15
[shortcut]
from=-3
activation=linear

## Layer 16
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 17
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 18
[shortcut]
from=-3
activation=linear

## Layer 19
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 20
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 21
[shortcut]
from=-3
activation=linear

## Layer 22
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 23
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 24
[shortcut]
from=-3
activation=linear


## Layer 25
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 26
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 27
[shortcut]
from=-3
activation=linear

## Layer 28
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 29
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 30
[shortcut]
from=-3
activation=linear

## Layer 31
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 32
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 33
[shortcut]
from=-3
activation=linear

## Layer 34
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

## Layer 35
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky

## Layer 36
[shortcut]
from=-3
activation=linear

# Downsample
## Layer 37
[convolutional]
batch_normalize=1
filters=512
size=3
stride=2
pad=1
activation=leaky

## Layer 38
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 39
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 40
[shortcut]
from=-3
activation=linear


## Layer 41
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 42
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 43
[shortcut]
from=-3
activation=linear


## Layer 44
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 45
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 46
[shortcut]
from=-3
activation=linear


## Layer 47
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 48
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 49
[shortcut]
from=-3
activation=linear

## Layer 50
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 51
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 52
[shortcut]
from=-3
activation=linear


## Layer 53
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 54
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 55
[shortcut]
from=-3
activation=linear


## Layer 56
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 57
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 58
[shortcut]
from=-3
activation=linear

## Layer 59
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

## Layer 60
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky

## Layer 61
[shortcut]
from=-3
activation=linear

# Downsample
## Layer 62
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=2
pad=1
activation=leaky

## Layer 63
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 64
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky

## Layer 65
[shortcut]
from=-3
activation=linear

## Layer 66
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 67
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky

## Layer 68
[shortcut]
from=-3
activation=linear

## Layer 69
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 70
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky

## Layer 71
[shortcut]
from=-3
activation=linear

## Layer 72
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 73
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky

## Layer 74
[shortcut]
from=-3
activation=linear

######### start yolo layer 1 (for large objects) #############

## Layer 75
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 76
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky

## Layer 77
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 78
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky

## Layer 79
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky

## Layer 80
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky

## Layer 81
[convolutional]
size=1
stride=1
pad=1
filters=24
activation=linear


## Layer 82
[yolo]
mask = 0,1,2
anchors = 453,300,  428,361,  456,417
classes=3
num=3
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1

